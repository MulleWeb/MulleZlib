# cmake/_Dependencies.cmake is generated by `mulle-sde`. Edits will be lost.
#
if( MULLE_TRACE_INCLUDE)
   message( STATUS "# Include \"${CMAKE_CURRENT_LIST_FILE}\"" )
endif()

if( NOT MULLE_OBJC_STANDARD_FOUNDATION_LIBRARY)
   find_library( MULLE_OBJC_STANDARD_FOUNDATION_LIBRARY NAMES ${CMAKE_STATIC_LIBRARY_PREFIX}MulleObjCStandardFoundation${CMAKE_STATIC_LIBRARY_SUFFIX} MulleObjCStandardFoundation)
   message( STATUS "MULLE_OBJC_STANDARD_FOUNDATION_LIBRARY is ${MULLE_OBJC_STANDARD_FOUNDATION_LIBRARY}")

   # the order looks ascending, but due to the way this file is read
   # it ends up being descending, which is what we need
   if( MULLE_OBJC_STANDARD_FOUNDATION_LIBRARY)
      set( DEPENDENCY_LIBRARIES
         ${DEPENDENCY_LIBRARIES}
         ${MULLE_OBJC_STANDARD_FOUNDATION_LIBRARY}
         CACHE INTERNAL "need to cache this"
      )
      # temporarily expand CMAKE_MODULE_PATH
      get_filename_component( _TMP_MULLE_OBJC_STANDARD_FOUNDATION_ROOT "${MULLE_OBJC_STANDARD_FOUNDATION_LIBRARY}" DIRECTORY)
      get_filename_component( _TMP_MULLE_OBJC_STANDARD_FOUNDATION_ROOT "${_TMP_MULLE_OBJC_STANDARD_FOUNDATION_ROOT}" DIRECTORY)

      # search for DependenciesAndLibraries.cmake to include
      foreach( _TMP_MULLE_OBJC_STANDARD_FOUNDATION_NAME "MulleObjCStandardFoundation")
         set( _TMP_MULLE_OBJC_STANDARD_FOUNDATION_DIR "${_TMP_MULLE_OBJC_STANDARD_FOUNDATION_ROOT}/include/${_TMP_MULLE_OBJC_STANDARD_FOUNDATION_NAME}/cmake")
         # use explicit path to avoid "surprises"
         if( EXISTS "${_TMP_MULLE_OBJC_STANDARD_FOUNDATION_DIR}/DependenciesAndLibraries.cmake")
            unset( MULLE_OBJC_STANDARD_FOUNDATION_DEFINITIONS)
            list( INSERT CMAKE_MODULE_PATH 0 "${_TMP_MULLE_OBJC_STANDARD_FOUNDATION_DIR}")
            include( "${_TMP_MULLE_OBJC_STANDARD_FOUNDATION_DIR}/DependenciesAndLibraries.cmake")
            list( REMOVE_ITEM CMAKE_MODULE_PATH "${_TMP_MULLE_OBJC_STANDARD_FOUNDATION_DIR}")
            set( INHERITED_DEFINITIONS
               ${INHERITED_DEFINITIONS}
               ${MULLE_OBJC_STANDARD_FOUNDATION_DEFINITIONS}
               CACHE INTERNAL "need to cache this"
            )
            break()
         endif()
      endforeach()
   else()
      message( FATAL_ERROR "MULLE_OBJC_STANDARD_FOUNDATION_LIBRARY was not found")
   endif()
endif()


if( NOT ${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
   if( NOT Z_LIBRARY)
      find_library( Z_LIBRARY NAMES ${CMAKE_STATIC_LIBRARY_PREFIX}z${CMAKE_STATIC_LIBRARY_SUFFIX} z ${CMAKE_STATIC_LIBRARY_PREFIX}zlib${CMAKE_STATIC_LIBRARY_SUFFIX} zlib)
      message( STATUS "Z_LIBRARY is ${Z_LIBRARY}")
   
      # the order looks ascending, but due to the way this file is read
      # it ends up being descending, which is what we need
      if( Z_LIBRARY)
         set( DEPENDENCY_LIBRARIES
            ${DEPENDENCY_LIBRARIES}
            ${Z_LIBRARY}
            CACHE INTERNAL "need to cache this"
         )
         # temporarily expand CMAKE_MODULE_PATH
         get_filename_component( _TMP_Z_ROOT "${Z_LIBRARY}" DIRECTORY)
         get_filename_component( _TMP_Z_ROOT "${_TMP_Z_ROOT}" DIRECTORY)
   
         # search for DependenciesAndLibraries.cmake to include
         foreach( _TMP_Z_NAME "z" "zlib")
            set( _TMP_Z_DIR "${_TMP_Z_ROOT}/include/${_TMP_Z_NAME}/cmake")
            # use explicit path to avoid "surprises"
            if( EXISTS "${_TMP_Z_DIR}/DependenciesAndLibraries.cmake")
               unset( Z_DEFINITIONS)
               list( INSERT CMAKE_MODULE_PATH 0 "${_TMP_Z_DIR}")
               include( "${_TMP_Z_DIR}/DependenciesAndLibraries.cmake")
               list( REMOVE_ITEM CMAKE_MODULE_PATH "${_TMP_Z_DIR}")
               set( INHERITED_DEFINITIONS
                  ${INHERITED_DEFINITIONS}
                  ${Z_DEFINITIONS}
                  CACHE INTERNAL "need to cache this"
               )
               break()
            endif()
         endforeach()
      else()
         message( FATAL_ERROR "Z_LIBRARY was not found")
      endif()
   endif()
endif()
